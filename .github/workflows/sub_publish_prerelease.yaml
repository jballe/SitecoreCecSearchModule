name: Sub Publish Prerelease

on:
  workflow_call:

jobs:
  publish:
    name: Publish prerelease to GitHub Package Repository
    runs-on: ubuntu-latest
    environment:
      name: gpr
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-tags: true
        fetch-depth: 0

    - name: GitVersion install
      shell: pwsh
      run: |
        dotnet tool install --global GitVersion.Tool --version 5.*

    - name: Update version
      shell: pwsh
      id: version
      run: |
        $versions = dotnet-gitversion /config .\bld\GitVersion.yml /output json | Out-String | ConvertFrom-Json
        Write-Host "GitVersion output"
        $versions

        $no = $versions.CommitsSinceVersionSourcePadded
        $version = $versions.MajorMinorPatch
        $prerelease = ("{0}" -f $versions.NuGetPreReleaseTagV2)
        $branch = $versions.PreReleaseLabel

        If("${{github.ref_name }}" -match "refs/pull/([0-9]+)/merge") {
          $pr = $Matches[1]
          $prerelease = "alpha${pr}pr${no}"
        } ElseIf("$branch" -ne "main") {
          $prerelease = "beta${branch}${no}"
        } ElseIf ("$branch" -eq "main" -and "${prerelease}" -eq "") {
          $prerelease = "rc${no}"
        }

        $fullversion = @($version, $prerelease) | Where-object { $_ -ne "" } -join "-"

        echo ("version={0}" -f $version) >> "$env:GITHUB_OUTPUT"
        echo ("prerelease={0}" -f $prerelease) >> "$env:GITHUB_OUTPUT"
        echo ("full_version={0}" -f $fullversion) >> "$env:GITHUB_OUTPUT"

        $versionParams = @{
          Path = "./src/SitecoreCecSearchModule/SitecoreCecSearchModule.psd1"
          ModuleVersion = $version
        }
        if("${prerelease}" -ne "") {
          $versionParams.Prerelease = $prerelease
        }

        Write-Host ("Update version to {0}" -f $fullversion)
        Update-ModuleManifest @versionParams

    - name: Create NuGet package
      shell: pwsh
      run: |
        $repoPath = (Join-Path $PWD "publish")
        If(-not (Test-Path $repoPath -PathType Container)) { New-Item $repoPath -ItemType Directory | Out-Null }

        Install-Module Microsoft.PowerShell.PSResourceGet -Repository PSGallery -Force
        Register-PSResourceRepository -Name nuget-local -Uri $repoPath
        Publish-PSResource -Path ./src/SitecoreCecSearchModule -Repository "nuget-local"
        
    - uses: actions/upload-artifact@v3
      with:
        name: package
        path: publish/*.nupkg

    - name: Publish Github Registry
      shell: pwsh
      #env:
      #  GPR_SECRET: ${{secrets.GITHUB_TOKEN}}
      run: |
        $user = "${{ github.actor }}"
        $token = "${{ github.token }}" | ConvertTo-SecureString -AsPlainText -Force
        $creds = New-Object System.Management.Automation.PSCredential -ArgumentList @($user, $token)
        $feed = "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        $moduleName = "SitecoreCecSearchModule"
        $repositoryName = "PowershellNugetServices"

        ## Force TLS1.2
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        
        ## Register repository
        $registerArgs = @{
            Name = $repositoryName
            SourceLocation = $feed
            PublishLocation = $feed
            InstallationPolicy = 'Trusted'
            Credential = $creds
        }
        
        Register-PSRepository @registerArgs
        
        Publish-Module -Path ./src/SitecoreCecSearchModule `
          -Repository $repositoryName `
          -NuGetApiKey "${{ github.token }}"  

    #- name: Upload Github package
    #  shell: pwsh
    #  env:
    #    GPR_SECRET: ${{secrets.GITHUB_TOKEN}}
    #  run: |
    #    dotnet tool install --global gpr --version 0.1.294
    #    gpr push -k "$env:GPR_SECRET" (Join-Path $PWD "publish" "*.nupkg" -Resolve) -r https://github.com/${{github.repository}}

    #- name: Publish
    #  shell: pwsh
    #  env:
    #    NUGET_KEY: ${{ secrets.PSGALLERY_SECRET }}
    #  run: |
    #    Publish-Module -path ./src/SitecoreCecSearchModule/1.0.0 -NuGetApiKey $env:NUGET_KEY -Verbose -ProjectUri -IconUri -AllowPrerelease

          
    # - name: Create github release tag
    #   if: success() && github.ref == 'refs/heads/master'
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: v${{ env.BUILD_VERSION }}
    #     release_name: Release v${{ env.BUILD_VERSION }}
    #     draft: true
    #     prerelease: false
