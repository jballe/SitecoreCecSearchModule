name: Sub Publish Prerelease

on:
  workflow_call:

jobs:
  publish:
    name: Publish prerelease to GitHub Package Repository
    runs-on: ubuntu-latest
    environment:
      name: gpr
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-tags: true
        fetch-depth: 0

    - name: GitVersion output
      shell: pwsh
      run: |
        dotnet tool install --global GitVersion.Tool --version 5.*
        dotnet-gitversion /config .\bld\GitVersion.yml /output json /url https://github.com/${{ github.repository }} /b ${{github.ref}} /c ${{github.sha}} /u ${{ github.actor }} /p ${{github.token}} | Out-String 

    - name: Calculate version
      shell: pwsh
      id: version
      run: |
        $baseVersion = "0.0.2"
        $tag = (git tag --points-at ae4209d4c672b49c36aa0578b945f40aa2356d65 | Out-String)
        $branch = "${{github.ref_name }}".Replace("feature/", "").Replace("/", "-").ToLower()
        $no = "${{github.run_number }}"
        $version = ""

        Write-Host "Tag:    $tag"
        Write-Host "Branch: $branch"
        Write-Host "No:     $no"

        If("${{github.ref_name }}" -match "refs/pull/([0-9]+)/merge") {
          $pr = $Matches[1]
          $version = "${baseVersion}-alpha-pr${pr}"-${no}
        } ElseIf ("${tag}" -ne "" -and $tag -match "v[0-9\.]+[0-9]" -and $tag.Length -gt 1) {
          $version = $tag.Substring(1)
        } ElseIf ($branch -eq "main") {
          $version = "${baseVersion}-rc-${no}"
        } Else {
          $version = "${baseVersion}-beta-${branch}-${no}"
        }

        echo ("version={0}" -f $tag.Substring(1)) >> "$env:GITHUB_OUTPUT"

    - name: Update version
      shell: pwsh
      run: |

        $version = "${{ steps.version.outputs.version}}"
        $parts = $version.Split("-", 2)
        $versionParams = @{
          Path = "./src/SitecoreCecSearchModule/SitecoreCecSearchModule.psd1"
          ModuleVersion = $parts[0]
        }
        if(($version.Contains("-")) {
          $versionParams.Prerelease = $parts[1]
        }

        Write-Host ("Update version to" -f $version)
        Update-ModuleManifest @versionParams -Verbose

    - name: Create NuGet package
      shell: pwsh
      run: |
        $repoPath = (Join-Path $PWD "publish")
        If(-not (Test-Path $repoPath -PathType Container)) { New-Item $repoPath -ItemType Directory | Out-Null }

        Install-Module Microsoft.PowerShell.PSResourceGet -Repository PSGallery -Force
        Register-PSResourceRepository -Name nuget-local -Uri $repoPath
        Publish-PSResource -Path ./src/SitecoreCecSearchModule -Repository "nuget-local"
        
    - uses: actions/upload-artifact@v3
      with:
        name: package
        path: publish/*.nupkg

    - name: Publish Github Registry
      shell: pwsh
      #env:
      #  GPR_SECRET: ${{secrets.GITHUB_TOKEN}}
      run: |
        $user = "${{ github.actor }}"
        $token = "${{ github.token }}" | ConvertTo-SecureString -AsPlainText -Force
        $creds = New-Object System.Management.Automation.PSCredential -ArgumentList @($user, $token)
        $feed = "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        $moduleName = "SitecoreCecSearchModule"
        $repositoryName = "PowershellNugetServices"

        ## Force TLS1.2
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        
        ## Register repository
        $registerArgs = @{
            Name = $repositoryName
            SourceLocation = $feed
            PublishLocation = $feed
            InstallationPolicy = 'Trusted'
            Credential = $creds
        }
        
        Register-PSRepository @registerArgs
        
        Publish-Module -Path ./src/SitecoreCecSearchModule `
          -Repository $repositoryName `
          -NuGetApiKey "${{ github.token }}"  

    #- name: Upload Github package
    #  shell: pwsh
    #  env:
    #    GPR_SECRET: ${{secrets.GITHUB_TOKEN}}
    #  run: |
    #    dotnet tool install --global gpr --version 0.1.294
    #    gpr push -k "$env:GPR_SECRET" (Join-Path $PWD "publish" "*.nupkg" -Resolve) -r https://github.com/${{github.repository}}

    #- name: Publish
    #  shell: pwsh
    #  env:
    #    NUGET_KEY: ${{ secrets.PSGALLERY_SECRET }}
    #  run: |
    #    Publish-Module -path ./src/SitecoreCecSearchModule/1.0.0 -NuGetApiKey $env:NUGET_KEY -Verbose -ProjectUri -IconUri -AllowPrerelease

          
    # - name: Create github release tag
    #   if: success() && github.ref == 'refs/heads/master'
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: v${{ env.BUILD_VERSION }}
    #     release_name: Release v${{ env.BUILD_VERSION }}
    #     draft: true
    #     prerelease: false
